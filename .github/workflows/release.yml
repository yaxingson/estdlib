name: release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [labeled, unlabeled, opened, synchronize]

jobs:
  check:
    name: 'Check if release is needed'
    runs-on: 'ubuntu-latest'
    outputs:
      exists: ${{ steps.check-tag.outputs.exists }}
    steps:
      - uses: actions/checkout@v3
      - name: Get Current Version
        id: get-version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
      - uses: mukunku/tag-exists-action@v1.1.0
        id: check-tag
        with:
          tag: v${{ steps.get-version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release:
    name: 'Release'
    needs: check
    if: needs.check.outputs.exists == 'false'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
      - name: Get Current Version
        id: get-version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: actions/create-release@v1
        id: create-release
        with:
          draft: false
          prerelease: false
          release_name: v${{ steps.get-version.outputs.version}}
          tag_name: v${{ steps.get-version.outputs.version}}
        env:
          GITHUB_TOKEN: ${{ github.token }}
  publish:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.exists == 'false'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
      - run: yarn
      - run: yarn build
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: '${{ secrets.NPM_TOKEN }}'
  verify-version:
    if: contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get Pull Request Version
        id: pr-version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: Get Base Version
        id: base-version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: yarn add semver
      - uses: actions/github-script@v6
        env:
          PR_VERSION: ${{steps.pr-version.outputs.version}}
          BASE_VERSION: ${{steps.base-version.outputs.version}}
        with:
          script: |
            const semver = require("semver")
            const { PR_VERSION: pr, BASE_VERSION: base } = process.env
            const pr_is_greater = semver.gt(pr, base)
            if (pr_is_greater) {
              core.debug(`Success, the pr version (${pr}) is higher than the base version (${base}).`)
            } else {
              core.setFailed(`The pr version (${pr}) is not greater than the base version (${base}). A pull request labeled with 'release' must have a valid version bump.`)
            }
